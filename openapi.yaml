openapi: 3.0.0
info:
  title: PlagiarismChecker API
  version: '1.0'
  description: API for checking students works for plagiarism
  contact:
    name: Maksym Datsenko
    email: muirehenwedd@gmail.com
tags:
  - name: Admin
    description: Manage 'base files' - files, content of which will be considered plagiarized, if found in student files.
  - name: Assignments
    description: Manage assignments, upload assignment files, run assignment
  - name: Identity
    description: Identity related endpoints
paths:
  /admin/files:
    post:
      operationId: UploadBaseFile
      summary: Upload base file
      tags:
        - Admin
      requestBody:
        $ref: '#/components/requestBodies/UploadFileBody'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseFileDto'
    get:
      operationId: GetAllBaseFiles
      summary: Get all base files
      tags:
        - Admin
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseFileDto'
  /admin/files/{name}:
    delete:
      operationId: DeleteBaseFileByName
      summary: Delete base file by name
      tags:
        - Admin
      parameters:
        - name: name
          in: path
          required: true
          style: simple
          schema:
            type: string
      responses:
        '204':
          description: Success
        '404':
          $ref: '#/components/responses/BaseFileNotFound'
  /admin/files/{fileId}:
    delete:
      operationId: DeleteBaseFileById
      description: Delete base file by ID
      tags:
        - Admin
      parameters:
        - name: fileId
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '404':
          $ref: '#/components/responses/BaseFileNotFound'
  /assignments:
    post:
      operationId: CreateAssignment
      summary: Create assignment
      tags:
        - Assignments
      requestBody:
        $ref: '#/components/requestBodies/CreateAssignmentBody'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignmentDto'
        '409':
          $ref: '#/components/responses/AssignmentAlreadyCreated'
    get:
      operationId: GetAllAssignments
      summary: Get all assignments
      tags:
        - Assignments
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssignmentDto'
  /assignments/{assignmentId}/files:
    post:
      operationId: UploadAssignmentFile
      summary: Upload assignment file
      tags:
        - Assignments
      parameters:
        - name: assignmentId
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: '#/components/requestBodies/UploadFileBody'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignmentFileDto'
        '403':
          $ref: '#/components/responses/AssignmentAccessDenied'
        '404':
          $ref: '#/components/responses/AssignmentNotFound'
  /assignments/{assignmentId}/files/{assignmentFileId}:
    get:
      operationId: GetAssignmentFile
      summary: Get assignment file
      tags:
        - Assignments
      parameters:
        - name: assignmentId
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
        - name: assignmentFileId
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '403':
          $ref: '#/components/responses/AssignmentAccessDenied'
        '404':
          description: Assignment with such ID was not found OR Assignment file with such ID was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                AssignmentNotFound:
                  $ref: '#/components/examples/AssignmentNotFoundExample'
                AssignmentFileNotFound:
                  $ref: '#/components/examples/AssignmentFileNotFoundExample'
    delete:
      operationId: DeleteAssignmentFile
      summary: Delete assignment file
      tags:
        - Assignments
      parameters:
        - name: assignmentId
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
        - name: assignmentFileId
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '404':
          description: Assignment with such ID was not found OR Assignment file with such ID was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                AssignmentNotFound:
                  $ref: '#/components/examples/AssignmentNotFoundExample'
                AssignmentFileNotFound:
                  $ref: '#/components/examples/AssignmentFileNotFoundExample'
  /assignments/{assignmentId}:
    get:
      operationId: GetAssignment
      tags:
        - Assignments
      parameters:
        - name: assignmentId
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignmentDto'
        '403':
          $ref: '#/components/responses/AssignmentAccessDenied'
        '404':
          $ref: '#/components/responses/AssignmentNotFound'
    delete:
      operationId: DeleteAssignment
      tags:
        - Assignments
      parameters:
        - name: assignmentId
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '403':
          $ref: '#/components/responses/AssignmentAccessDenied'
        '404':
          $ref: '#/components/responses/AssignmentNotFound'
  /assignments/{assignmentId}/check:
    get:
      operationId: CheckForPlagiarism
      tags:
        - Assignments
      parameters:
        - name: assignmentId
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlagiarismCheckResult'
        '403':
          $ref: '#/components/responses/AssignmentAccessDenied'
        '404':
          $ref: '#/components/responses/AssignmentNotFound'
  /register:
    post:
      tags:
        - Identity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /login:
    post:
      tags:
        - Identity
      parameters:
        - name: useCookies
          in: query
          style: form
          schema:
            type: boolean
        - name: useSessionCookies
          in: query
          style: form
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenResponse'
  /refresh:
    post:
      tags:
        - Identity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenResponse'
components:
  requestBodies:
    CreateAssignmentBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              assignmentName:
                type: string
                description: name of new assignment
    UploadFileBody:
      content:
        multipart/form-data:
          schema:
            required:
              - FormFileCollection
            type: object
            properties:
              FormFileCollection:
                type: array
                items:
                  type: string
                  format: binary
          encoding:
            FormFileCollection:
              style: form
  schemas:
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          description: A URI reference that identifies the problem type.
          format: uri
          maxLength: 1024
        status:
          type: integer
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          format: int32
          minimum: 100
          maximum: 599
        title:
          type: string
          description: A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem, except for purposes of localization.
          maxLength: 1024
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          maxLength: 4096
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
          maxLength: 1024
        code:
          type: string
          description: An API specific error code aiding the provider team understand the error based on their own potential taxonomy or registry.
          maxLength: 50
        errors:
          $ref: '#/components/schemas/Errors'
      required:
        - title
    AccessTokenResponse:
      type: object
      properties:
        tokenType:
          type: string
          nullable: true
          readOnly: true
        accessToken:
          type: string
          nullable: true
        expiresIn:
          type: integer
          format: int64
        refreshToken:
          type: string
          nullable: true
      additionalProperties: false
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        twoFactorCode:
          type: string
          nullable: true
        twoFactorRecoveryCode:
          type: string
          nullable: true
      additionalProperties: false
    RefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
          nullable: true
      additionalProperties: false
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    BaseFileDto:
      description: Uploaded by the administrator file
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: unique identifier of the base file
        name:
          type: string
          description: name of file
          example: google_results_collected.txt
    AssignmentFileDto:
      description: File, associated with the assignment
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: unique identifier of the file
        name:
          type: string
          description: name of file
          example: file1.docx
    AssignmentDto:
      description: Set of documents, usually grouped by task
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: unique identifier of the assignment
        assignmentName:
          type: string
          description: name of the assignment
        creationTimestamp:
          type: string
          format: date-time
          description: timestamp of the assignment creation
        assignmentFiles:
          type: array
          items:
            $ref: '#/components/schemas/AssignmentFileDto'
    MatchDto:
      description: A pair of documents between which similarities were found
      type: object
      properties:
        documentLeftName:
          type: string
        documentRightName:
          type: string
        matchingWordPerfect:
          type: integer
          minimum: 0
        matchingWordTotalL:
          type: integer
          minimum: 0
        matchingWordTotalR:
          type: integer
          minimum: 0
        matchingPercentL:
          type: number
          minimum: 0
          maximum: 100
        matchingPercentR:
          type: number
          minimum: 0
          maximum: 100
      example:
        documentLeftName: left.txt
        documentRightName: right.txt
        matchingWordPerfect: 105
        matchingWordTotal: 50
        matchingWordTotalR: 50
        matchingPercentL: 30
        matchingPercentR: 20
    PlagiarismCheckResult:
      description: Plagiarism check operation result
      type: object
      properties:
        plagiarismFound:
          description: Indicates if plagiarism were found (at least one pair of documents, similarity of which crosses the threshold)
          type: boolean
        matches:
          type: array
          items:
            $ref: '#/components/schemas/MatchDto'
    ErrorDetail:
      type: object
      description: An object to provide explicit details on a problem towards an API consumer.
      properties:
        detail:
          type: string
          description: A granular description on the specific error related to a body property, query parameter, path parameters, and/or header.
          maxLength: 4096
        pointer:
          type: string
          description: A JSON Pointer to a specific request body property that is the source of error.
          maxLength: 1024
        parameter:
          type: string
          description: The name of the query or path parameter that is the source of error.
          maxLength: 1024
        header:
          type: string
          description: The name of the header that is the source of error.
          maxLength: 1024
        code:
          type: string
          description: A string containing additional provider specific codes to identify the error context.
          maxLength: 50
      required:
        - detail
    Errors:
      type: array
      description: An array of error details to accompany a problem details response.
      maxItems: 1000
      items:
        $ref: '#/components/schemas/ErrorDetail'
  responses:
    BaseFileNotFound:
      description: Base file with such ID or name was not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            example1:
              $ref: '#/components/examples/BaseFileNotFoundExample'
    AssignmentAccessDenied:
      description: User has no rights to access this assignment
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            example1:
              $ref: '#/components/examples/AssignmentAccessDeniedExample'
    AssignmentAlreadyCreated:
      description: User already created assignment with this name
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            example1:
              $ref: '#/components/examples/AssignmentAlreadyCreatedExample'
    AssignmentFileNotFound:
      description: Assignment file with such ID was not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            example1:
              $ref: '#/components/examples/AssignmentFileNotFoundExample'
    AssignmentNotFound:
      description: Assignment with such ID was not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            example1:
              $ref: '#/components/examples/AssignmentNotFoundExample'
  examples:
    BaseFileNotFoundExample:
      value:
        type: https://tools.ietf.org/html/rfc9110#section-15.5.5
        title: BaseFileNotFoundException
        status: 404
        detail: File was not found.
        custom-error-code: 204
    AssignmentAccessDeniedExample:
      value:
        type: https://tools.ietf.org/html/rfc9110#section-15.5.4
        title: AssignmentAccessDeniedException
        status: 403
        detail: User has no rights to access this assignment.
        custom-error-code: 201
    AssignmentAlreadyCreatedExample:
      value:
        type: https://tools.ietf.org/html/rfc9110#section-15.5.10
        title: AssignmentAlreadyCreatedException
        status: 409
        detail: Assignment with this name was already created.
        custom-error-code: 202
    AssignmentFileNotFoundExample:
      value:
        type: https://tools.ietf.org/html/rfc9110#section-15.5.5
        title: AssignmentFileNotFoundException
        status: 404
        detail: Assignment file was not found.
        custom-error-code: 205
    AssignmentNotFoundExample:
      value:
        type: https://tools.ietf.org/html/rfc9110#section-15.5.5
        title: AssignmentNotFoundException
        status: 404
        detail: Assignment was not found.
        custom-error-code: 203
